import { ApiService } from './api'

export interface ChatMessage {
  id: string
  text: string
  isBot: boolean
  timestamp: Date
}

// Database c√¢u tr·∫£ l·ªùi offline
const offlineResponses = {
  greeting: [
    'Xin ch√†o! T√¥i l√† AI Assistant chuy√™n v·ªÅ PC Builder c·ªßa EzBuild. T√¥i c√≥ th·ªÉ t∆∞ v·∫•n v·ªÅ linh ki·ªán PC, so s√°nh hi·ªáu nƒÉng, v√† gi√∫p b·∫°n build PC ph√π h·ª£p nh·∫•t. B·∫°n mu·ªën h·ªèi g√¨ v·ªÅ PC?',
    'Ch√†o b·∫°n! T√¥i l√† AI c·ªßa EzBuild, chuy√™n t∆∞ v·∫•n v·ªÅ linh ki·ªán PC v√† PC Builder. B·∫°n c·∫ßn t∆∞ v·∫•n g√¨ v·ªÅ PC h√¥m nay?',
    'Hello! T√¥i l√† AI Assistant EzBuild. H√£y h·ªèi t√¥i v·ªÅ CPU, GPU, RAM, ho·∫∑c b·∫•t c·ª© ƒëi·ªÅu g√¨ li√™n quan ƒë·∫øn PC!',
    'Ch√†o m·ª´ng ƒë·∫øn v·ªõi EzBuild! T√¥i l√† AI Assistant chuy√™n v·ªÅ PC. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t∆∞ v·∫•n linh ki·ªán, so s√°nh hi·ªáu nƒÉng, ho·∫∑c build PC. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?'
  ],
  error: [
    'Xin l·ªói, c√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi v·ªõi AI. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.',
    'C√≥ v·∫•n ƒë·ªÅ v·ªõi d·ªãch v·ª• AI. H√£y th·ª≠ l·∫°i sau m·ªôt ch√∫t nh√©!',
  ]
}

export const sendMessage = async (
  message: string, 
  chatHistory: ChatMessage[] = []
): Promise<string> => {
  console.log('üöÄ sendMessage called with:', message)
  
  // Ki·ªÉm tra c√¢u ch√†o tr∆∞·ªõc - ch·ªâ c√¢u ch√†o m·ªõi d√πng offline response
  const lowerMessage = message.toLowerCase()
  if (lowerMessage.includes('ch√†o') || lowerMessage.includes('hello') || lowerMessage.includes('hi') || lowerMessage.includes('xin ch√†o')) {
    console.log('üìù Using greeting response')
    return offlineResponses.greeting[Math.floor(Math.random() * offlineResponses.greeting.length)]
  }

  try {
    console.log('‚úÖ Calling backend AI API')
    
    // Convert chat history to backend format
    const history = chatHistory
      .filter(msg => msg.text && !msg.text.toLowerCase().includes('xin ch√†o'))
      .map(msg => ({
        role: msg.isBot ? 'assistant' : 'user',
        content: msg.text
      }))
    
    console.log('üì§ Sending request to backend:', { message, historyLength: history.length })
    
    // Call backend API
    const response = await ApiService.sendAIChatMessage(message, history)
    
    console.log('‚úÖ Received response from backend AI:', response.substring(0, 100) + '...')
    
    return response
  } catch (error: unknown) {
    console.error('‚ùå L·ªói khi g·ªçi backend AI API:', error)
    
    // Type guard for Error object
    if (error instanceof Error) {
      console.error('Error details:', {
        message: error.message,
        name: error.name
      })
      
      // Ph√¢n lo·∫°i l·ªói v√† x·ª≠ l√Ω ph√π h·ª£p
      if (error.message.includes('Failed to fetch')) {
        return "Xin l·ªói, kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng."
      }
      
      if (error.message.includes('401') || error.message.includes('403')) {
        return "Xin l·ªói, b·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng AI."
      }
    }
    
    // Fallback v·ªÅ offline mode
    console.log('Chuy·ªÉn sang offline mode do l·ªói API')
    return offlineResponses.error[Math.floor(Math.random() * offlineResponses.error.length)]
  }
}

export default sendMessage
