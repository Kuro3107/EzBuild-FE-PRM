import { ApiService } from './api'

export interface ChatMessage {
  id: string
  text: string
  isBot: boolean
  timestamp: Date
}

// Database c√¢u tr·∫£ l·ªùi offline
const offlineResponses = {
  greeting: [
    'Xin ch√†o! T√¥i l√† AI Assistant chuy√™n v·ªÅ PC Builder c·ªßa EzBuild. T√¥i c√≥ th·ªÉ t∆∞ v·∫•n v·ªÅ linh ki·ªán PC, so s√°nh hi·ªáu nƒÉng, v√† gi√∫p b·∫°n build PC ph√π h·ª£p nh·∫•t. B·∫°n mu·ªën h·ªèi g√¨ v·ªÅ PC?',
    'Ch√†o b·∫°n! T√¥i l√† AI c·ªßa EzBuild, chuy√™n t∆∞ v·∫•n v·ªÅ linh ki·ªán PC v√† PC Builder. B·∫°n c·∫ßn t∆∞ v·∫•n g√¨ v·ªÅ PC h√¥m nay?',
    'Hello! T√¥i l√† AI Assistant EzBuild. H√£y h·ªèi t√¥i v·ªÅ CPU, GPU, RAM, ho·∫∑c b·∫•t c·ª© ƒëi·ªÅu g√¨ li√™n quan ƒë·∫øn PC!',
    'Ch√†o m·ª´ng ƒë·∫øn v·ªõi EzBuild! T√¥i l√† AI Assistant chuy√™n v·ªÅ PC. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t∆∞ v·∫•n linh ki·ªán, so s√°nh hi·ªáu nƒÉng, ho·∫∑c build PC. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?'
  ],
  error: [
    'Xin l·ªói, c√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi v·ªõi AI. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.',
    'C√≥ v·∫•n ƒë·ªÅ v·ªõi d·ªãch v·ª• AI. H√£y th·ª≠ l·∫°i sau m·ªôt ch√∫t nh√©!',
  ]
}

export const sendMessage = async (
  message: string, 
  chatHistory: ChatMessage[] = []
): Promise<string> => {
  console.log('üöÄ sendMessage called with:', message)
  
  // Ki·ªÉm tra c√¢u ch√†o tr∆∞·ªõc - ch·ªâ c√¢u ch√†o m·ªõi d√πng offline response
  const lowerMessage = message.toLowerCase()
  if (lowerMessage.includes('ch√†o') || lowerMessage.includes('hello') || lowerMessage.includes('hi') || lowerMessage.includes('xin ch√†o')) {
    console.log('üìù Using greeting response')
    return offlineResponses.greeting[Math.floor(Math.random() * offlineResponses.greeting.length)]
  }

  // ====== √ù ƒê·ªäNH MI·ªÄN PC: s·∫£n ph·∫©m m·∫°nh nh·∫•t, g·ª£i √Ω c·∫•u h√¨nh ======
  const strongestPatterns = ['m·∫°nh nh·∫•t', 'ƒë·ªânh nh·∫•t', 'x·ªãn nh·∫•t', 'top', 'best', 'cao c·∫•p nh·∫•t']
  const isStrongestQuery = strongestPatterns.some(p => lowerMessage.includes(p))
  const mentionCPU = ['cpu', 'vi x·ª≠ l√Ω', 'processor', 'intel', 'amd', 'ryzen', 'core i'].some(p => lowerMessage.includes(p))
  const mentionGPU = ['gpu', 'vga', 'card m√†n h√¨nh', 'card ƒë·ªì h·ªça', 'geforce', 'rtx', 'radeon'].some(p => lowerMessage.includes(p))

  type AnyProduct = { name?: string; productPrices?: Array<{ price?: number }> }

  async function getTopByCategory(categoryId: number, label: string): Promise<string> {
    try {
      const products = await ApiService.getProductsByCategory(categoryId)
      if (!Array.isArray(products) || products.length === 0) {
        return `Hi·ªán ch∆∞a c√≥ ${label} trong database ƒë·ªÉ t∆∞ v·∫•n.`
      }

      const scoreOf = (p: Record<string, unknown>): number => {
        const prod = p as unknown as AnyProduct
        const name = String(prod.name || '')
        const prices = Array.isArray(prod.productPrices) ? prod.productPrices.map(x => Number(x.price || 0)) : []
        const maxPrice = prices.length ? Math.max(...prices) : 0
        let bonus = 0
        if (label === 'CPU' && /i9|ryzen\s*9|threadripper/i.test(name)) bonus += 1_000_000_000
        if (label === 'GPU' && /4090|4080|7900\s*xtx|7900\s*xt/i.test(name)) bonus += 1_000_000_000
        return maxPrice + bonus
      }

      const sorted = [...products].sort((a, b) => scoreOf(b) - scoreOf(a))
      const top = sorted[0] as Record<string, unknown>
      const topProd = top as unknown as AnyProduct
      const name = String(topProd.name || 'Unknown')
      const prices = Array.isArray(topProd.productPrices) ? topProd.productPrices.map(x => Number(x.price || 0)) : []
      const minPrice = prices.length ? Math.min(...prices) : 0
      const maxPrice = prices.length ? Math.max(...prices) : 0
      const priceText = prices.length
        ? (minPrice === maxPrice ? `${maxPrice.toLocaleString('vi-VN')} VND` : `${minPrice.toLocaleString('vi-VN')} - ${maxPrice.toLocaleString('vi-VN')} VND`)
        : 'Li√™n h·ªá'

      return `Theo d·ªØ li·ªáu hi·ªán c√≥, ${label} m·∫°nh nh·∫•t l√†: ${name}${priceText ? ` (t·∫ßm gi√° ${priceText})` : ''}. B·∫°n c√≥ mu·ªën xem chi ti·∫øt ho·∫∑c g·ª£i √Ω c·∫•u h√¨nh k√®m theo kh√¥ng?`
    } catch (e) {
      console.error('AI strongest lookup error:', e)
      return `Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu ${label}. B·∫°n th·ª≠ l·∫°i sau gi√∫p m√¨nh nh√©.`
    }
  }

  if (isStrongestQuery && mentionCPU) {
    return await getTopByCategory(1, 'CPU')
  }
  if (isStrongestQuery && mentionGPU) {
    return await getTopByCategory(2, 'GPU')
  }

  // G·ª£i √Ω c·∫•u h√¨nh theo nhu c·∫ßu
  const isGaming = /(ch∆°i game|gaming|fps|esports|valorant|cs2|lol)/i.test(message)
  const isOffice = /(vƒÉn ph√≤ng|office|word|excel|ppt|l∆∞·ªõt web)/i.test(message)
  const isCreator = /(ƒë·ªì h·ªça|render|premiere|after effects|photoshop|blender|3d|ai model)/i.test(message)
  if (isGaming || isOffice || isCreator) {
    const rec = isOffice
      ? `C·∫•u h√¨nh vƒÉn ph√≤ng ƒë·ªÅ xu·∫•t:\n- CPU: 6 nh√¢n (Core i5 / Ryzen 5)\n- RAM: 16GB\n- ·ªî c·ª©ng: SSD NVMe 500GB\n- GPU: iGPU ho·∫∑c GTX 1650 n·∫øu c·∫ßn ƒëa m√†n h√¨nh\n- PSU: 500W 80+ Bronze\n- Case: mATX nh·ªè g·ªçn\nB·∫°n cho m√¨nh ng√¢n s√°ch (VND) ƒë·ªÉ g·ª£i √Ω chi ti·∫øt?`
      : isGaming
      ? `C·∫•u h√¨nh gaming theo 3 m·ª©c:\n- Ti·∫øt ki·ªám: CPU 6‚Äì8 nh√¢n, RAM 16GB, GPU RTX 3060 / RX 6600, SSD 1TB, PSU 550‚Äì650W.\n- C√¢n b·∫±ng: CPU 8‚Äì12 nh√¢n, RAM 32GB, GPU RTX 4070 / RX 7800 XT, SSD 1TB Gen4, PSU 650‚Äì750W.\n- Cao c·∫•p: CPU 12‚Äì16 nh√¢n, RAM 32‚Äì64GB, GPU RTX 4080/4090 ho·∫∑c RX 7900 XTX, SSD 2TB Gen4, PSU 850‚Äì1000W.\nH√£y cho m√¨nh ƒë·ªô ph√¢n gi·∫£i (1080p/1440p/4K) v√† FPS m·ª•c ti√™u ƒë·ªÉ ch·ªët c·∫•u h√¨nh c·ª• th·ªÉ.`
      : `C·∫•u h√¨nh d·ª±ng phim/ƒë·ªì h·ªça ƒë·ªÅ xu·∫•t:\n- CPU: 12‚Äì24 nh√¢n (Core i7/i9 ho·∫∑c Ryzen 7/9)\n- RAM: 32‚Äì64GB\n- GPU: RTX 4070 tr·ªü l√™n (NVENC/Studio) ho·∫∑c RX 7900 series\n- ·ªî c·ª©ng: SSD NVMe Gen4 1‚Äì2TB + HDD l∆∞u tr·ªØ n·∫øu c·∫ßn\n- PSU: 750‚Äì1000W 80+ Gold\n- M√†n h√¨nh: 2 m√†n h√¨nh 2K/4K n·∫øu ƒëa nhi·ªám\nB·∫°n cho m√¨nh ph·∫ßn m·ªÅm ch√≠nh v√† ng√¢n s√°ch ƒë·ªÉ g·ª£i √Ω chi ti·∫øt nh√©.`
    return rec
  }

  // 3) G·ª£i √Ω c·∫•u h√¨nh theo ng√¢n s√°ch: "t√¥i c√≥ X tri·ªáu" / "budget X VND"
  const budgetMatchTri·ªáu = lowerMessage.match(/(\d+[.,]?\d*)\s*tri·ªáu/)
  const budgetMatchVnd = lowerMessage.match(/(\d+[.,]?\d*)\s*(vnƒë|vnd|ƒë|dong|ƒë·ªìng)/)
  const normalizeNumber = (raw: string) => Number(raw.replace(/\./g, '').replace(/,/g, '.'))
  let budgetVnd = 0
  if (budgetMatchTri·ªáu) budgetVnd = Math.round(normalizeNumber(budgetMatchTri·ªáu[1]) * 1_000_000)
  else if (budgetMatchVnd) budgetVnd = Math.round(normalizeNumber(budgetMatchVnd[1]))

  if (budgetVnd > 0) {
    // Ph√¢n b·ªï ng√¢n s√°ch theo t·ª∑ l·ªá tham kh·∫£o
    const alloc = (pct: number) => Math.round((budgetVnd * pct) / 100_000) * 100_000
    const isSmall = budgetVnd < 15_000_000
    const lines = [
      `Ng√¢n s√°ch ~${budgetVnd.toLocaleString('vi-VN')} VND, g·ª£i √Ω ph√¢n b·ªï:`,
      `- CPU: ${alloc(isSmall ? 25 : 20).toLocaleString('vi-VN')} VND`,
      `- GPU: ${alloc(isSmall ? 30 : 40).toLocaleString('vi-VN')} VND`,
      `- RAM (16‚Äì32GB): ${alloc(10).toLocaleString('vi-VN')} VND`,
      `- SSD NVMe: ${alloc(8).toLocaleString('vi-VN')} VND`,
      `- Mainboard: ${alloc(8).toLocaleString('vi-VN')} VND`,
      `- PSU 80+ Bronze/Gold: ${alloc(8).toLocaleString('vi-VN')} VND`,
      `- Case + T·∫£n: ${alloc(6).toLocaleString('vi-VN')} VND`,
      `B·∫°n cho m√¨nh nhu c·∫ßu (game/ph·∫ßn m·ªÅm, ƒë·ªô ph√¢n gi·∫£i, ∆∞u ti√™n im l·∫∑ng/nh·ªè g·ªçn/ƒë·∫πp) ƒë·ªÉ ch·ªët m√£ linh ki·ªán c·ª• th·ªÉ t·ª´ kho d·ªØ li·ªáu nh√©.`
    ]
    return lines.join('\n')
  }

  // 4) H·ªèi "m·∫°nh nh·∫•t" cho c√°c danh m·ª•c kh√°c: RAM/SSD/PSU/Mainboard/Monitor/Case/Cooling/Keyboard/Mouse/Headset
  if (isStrongestQuery) {
    // Tra c·ª©u category theo t√™n t·ª´ backend ƒë·ªÉ kh√¥ng ph·ª• thu·ªôc ID c·ª©ng
    const keywordMap: Array<{ keys: string[]; label: string }> = [
      { keys: ['ram', 'memory'], label: 'RAM' },
      { keys: ['ssd', 'hdd', 'storage', '·ªï c·ª©ng'], label: 'Storage' },
      { keys: ['psu', 'ngu·ªìn'], label: 'PSU' },
      { keys: ['mainboard', 'motherboard', 'bo m·∫°ch ch·ªß'], label: 'Mainboard' },
      { keys: ['monitor', 'm√†n h√¨nh'], label: 'Monitor' },
      { keys: ['case', 'v·ªè m√°y'], label: 'Case' },
      { keys: ['cooling', 't·∫£n', 't·∫£n nhi·ªát', 'aio', 'air'], label: 'Cooling' },
      { keys: ['keyboard', 'b√†n ph√≠m'], label: 'Keyboard' },
      { keys: ['mouse', 'chu·ªôt'], label: 'Mouse' },
      { keys: ['headset', 'tai nghe', 'loa', 'speaker'], label: 'Headset/Speaker' },
    ]

    const hit = keywordMap.find(item => item.keys.some(k => lowerMessage.includes(k)))
    if (hit) {
      try {
        const categories = await ApiService.getCategories()
        const found = (categories || []).find((c: Record<string, unknown>) =>
          String((c as Record<string, unknown>).name || (c as Record<string, unknown>).categoryName || '').toLowerCase().includes(hit.label.toLowerCase())
        )
        if (!found || found.id == null) {
          return `M√¨nh ch∆∞a x√°c ƒë·ªãnh ƒë∆∞·ª£c danh m·ª•c "${hit.label}" trong database ƒë·ªÉ tra c·ª©u. B·∫°n c√≥ th·ªÉ m·ªü trang s·∫£n ph·∫©m t∆∞∆°ng ·ª©ng v√† th·ª≠ l·∫°i.`
        }
        return await getTopByCategory(Number((found as Record<string, unknown>).id as number), hit.label)
      } catch (e) {
        console.error('Category resolve failed:', e)
        return `Kh√¥ng l·∫•y ƒë∆∞·ª£c danh m·ª•c "${hit.label}" t·ª´ server. B·∫°n th·ª≠ l·∫°i sau gi√∫p m√¨nh nh√©.`
      }
    }
  }

  try {
    console.log('‚úÖ Calling backend AI API')
    
    // Convert chat history to backend format
    const history = chatHistory
      .filter(msg => msg.text && !msg.text.toLowerCase().includes('xin ch√†o'))
      .map(msg => ({
        role: msg.isBot ? 'assistant' : 'user',
        content: msg.text
      }))
    
    console.log('üì§ Sending request to backend:', { message, historyLength: history.length })
    
    // Call backend API
    const response = await ApiService.sendAIChatMessage(message, history)
    
    console.log('‚úÖ Received response from backend AI:', response.substring(0, 100) + '...')
    
    return response
  } catch (error: unknown) {
    console.error('‚ùå L·ªói khi g·ªçi backend AI API:', error)
    
    // Type guard for Error object
    if (error instanceof Error) {
      console.error('Error details:', {
        message: error.message,
        name: error.name
      })
      
      // Ph√¢n lo·∫°i l·ªói v√† x·ª≠ l√Ω ph√π h·ª£p
      if (error.message.includes('Failed to fetch')) {
        return "Xin l·ªói, kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng."
      }
      
      if (error.message.includes('401') || error.message.includes('403')) {
        return "Xin l·ªói, b·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng AI."
      }
    }
    
    // Fallback v·ªÅ offline mode
    console.log('Chuy·ªÉn sang offline mode do l·ªói API')
    return offlineResponses.error[Math.floor(Math.random() * offlineResponses.error.length)]
  }
}

export default sendMessage
